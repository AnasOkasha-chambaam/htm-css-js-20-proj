<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      /* @import url("fineprint.css"); */
      body {
        background: red;
      }
      h1 {
        background: green;
      }
    </style>
    <title>Document</title>
  </head>
  <body>
    <h1 data-any="ant: 1; ant: 2;" style="border: 10px solid gray">
      hello world>
    </h1>
    <script>
      let st =
        "@import url('any.css');body{background:red;}  body h1{background:green;} h1{color:#333}.any{color: yellow}\n@media (max-width: 200px) {body{border: white}}\n @media (max-width: 200px) and (max-height: 200px) {body{border:20px solid white}h1{color: red}}h1{font-size: 12px} \n@import url('any.css')";
      async function inlineSt(str) {
        str = str.trim().replace(/\r?\n|\r/g, ""); // getting rid of line breaks
        if (str) {
          // checking if there is words after cleaning the string from line breaks
          let res = str.split("{").map((one) => one.split("}")), // the array we are  going to work with which has the style of [[import or media query, elem1], [style of elem1, elem2]] if there is an empty element in the middle of the sub array then that means the past media query has finished
            i = 0, // the iterator
            dataAttName = ""; // if it has a value, then a media query will start
          console.log(res);
          do {
            let nwRes = res[i][res[i].length - 1].trim(); // name of the last index. it could be element or media query
            console.log(nwRes);
            if (!res[i][res[i].length - 2]) {
              // checking if the second element of the current sub arrayh is an empty element to set a new media query
              dataAttName = "";
            }
            if (nwRes.startsWith("@import")) {
              let arr = nwRes.indexOf(";") > -1 ? nwRes.split(";") : nwRes,
                url;
              res[i] = arr; // the one who has the import line
              if ((url = arr[0].match(/\(['"]([^]+\.css)['"]\)/))) {
                // geting the url
                let call = await fetch(url[1]), // geting data from external file
                  resp = await call.text();
                inlineSt(await resp); // rerunning the function on the external file content
              }
            }

            if (/^[\.#\w]/.test(nwRes.trim())) {
              // tests if the line starts with . for class, # for id, a-z for the tag name
              if (res[i].length == 1 && res[i - 1]) {
                // checking if the array has a single elements and sets query if that is right
                let mediaDimensions = res[i - 1][res[i - 1].length - 1].match(
                  /\(([^]+?)\)/g
                ); // isolating the (max-width: 100px) and (min-height: 100px)
                dataAttName = "";
                mediaDimensions.forEach((one, ind) => {
                  dataAttName += one
                    .slice(1, one.length - 1)
                    .split(":")
                    .join("-")
                    .replace(/\s/g, "");
                  if (ind != mediaDimensions.length - 1) {
                    // checking if there are other media query rules
                    dataAttName += "-and-";
                  }
                });
              }
              if (dataAttName.length > 0) {
                // checking if we are in a media query state
                let theElm = document.querySelector(nwRes);
                if (theElm) {
                  theElm.setAttribute(
                    // setting the media attribute
                    "data-media-" + dataAttName.trim(),
                    (theElm.getAttribute("data-media-" + dataAttName.trim())
                      ? theElm.getAttribute("data-media-" + dataAttName.trim())
                      : "") +
                      ";" +
                      res[i + 1][0]
                  );
                }
              } else {
                let theElm = document.querySelector(nwRes);
                if (theElm) {
                  theElm.setAttribute(
                    "style",
                    (theElm.getAttribute("style")
                      ? theElm.getAttribute("style")
                      : "") +
                      ";" +
                      res[i + 1][0]
                  );
                }
              }
              //   if (!setHeight && !setWidth) {
              //   }
            }

            // console.log("-_-", document.querySelector(res[i][x]))
            i++; // increasing the iterator by one
          } while (res[i] && res[i][res[i].length - 1]);
        }
      }

      window.addEventListener("DOMContentLoaded", (e) => {
        // applying our function only after the page is loaded
        console.log("DOM fully loaded and parsed");
        inlineSt(st);
      });
    </script>
  </body>
</html>
